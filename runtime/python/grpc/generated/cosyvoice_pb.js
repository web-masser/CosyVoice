// source: cosyvoice.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.cosyvoice.Request', null, global);
goog.exportSymbol('proto.cosyvoice.Request.RequestpayloadCase', null, global);
goog.exportSymbol('proto.cosyvoice.Response', null, global);
goog.exportSymbol('proto.cosyvoice.crosslingualRequest', null, global);
goog.exportSymbol('proto.cosyvoice.instructRequest', null, global);
goog.exportSymbol('proto.cosyvoice.sftRequest', null, global);
goog.exportSymbol('proto.cosyvoice.zeroshotRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosyvoice.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cosyvoice.Request.oneofGroups_);
};
goog.inherits(proto.cosyvoice.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosyvoice.Request.displayName = 'proto.cosyvoice.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosyvoice.sftRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosyvoice.sftRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosyvoice.sftRequest.displayName = 'proto.cosyvoice.sftRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosyvoice.zeroshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosyvoice.zeroshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosyvoice.zeroshotRequest.displayName = 'proto.cosyvoice.zeroshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosyvoice.crosslingualRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosyvoice.crosslingualRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosyvoice.crosslingualRequest.displayName = 'proto.cosyvoice.crosslingualRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosyvoice.instructRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosyvoice.instructRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosyvoice.instructRequest.displayName = 'proto.cosyvoice.instructRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosyvoice.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosyvoice.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosyvoice.Response.displayName = 'proto.cosyvoice.Response';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cosyvoice.Request.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.cosyvoice.Request.RequestpayloadCase = {
  REQUESTPAYLOAD_NOT_SET: 0,
  SFT_REQUEST: 1,
  ZERO_SHOT_REQUEST: 2,
  CROSS_LINGUAL_REQUEST: 3,
  INSTRUCT_REQUEST: 4
};

/**
 * @return {proto.cosyvoice.Request.RequestpayloadCase}
 */
proto.cosyvoice.Request.prototype.getRequestpayloadCase = function() {
  return /** @type {proto.cosyvoice.Request.RequestpayloadCase} */(jspb.Message.computeOneofCase(this, proto.cosyvoice.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosyvoice.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cosyvoice.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosyvoice.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    sftRequest: (f = msg.getSftRequest()) && proto.cosyvoice.sftRequest.toObject(includeInstance, f),
    zeroShotRequest: (f = msg.getZeroShotRequest()) && proto.cosyvoice.zeroshotRequest.toObject(includeInstance, f),
    crossLingualRequest: (f = msg.getCrossLingualRequest()) && proto.cosyvoice.crosslingualRequest.toObject(includeInstance, f),
    instructRequest: (f = msg.getInstructRequest()) && proto.cosyvoice.instructRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosyvoice.Request}
 */
proto.cosyvoice.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosyvoice.Request;
  return proto.cosyvoice.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosyvoice.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosyvoice.Request}
 */
proto.cosyvoice.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosyvoice.sftRequest;
      reader.readMessage(value,proto.cosyvoice.sftRequest.deserializeBinaryFromReader);
      msg.setSftRequest(value);
      break;
    case 2:
      var value = new proto.cosyvoice.zeroshotRequest;
      reader.readMessage(value,proto.cosyvoice.zeroshotRequest.deserializeBinaryFromReader);
      msg.setZeroShotRequest(value);
      break;
    case 3:
      var value = new proto.cosyvoice.crosslingualRequest;
      reader.readMessage(value,proto.cosyvoice.crosslingualRequest.deserializeBinaryFromReader);
      msg.setCrossLingualRequest(value);
      break;
    case 4:
      var value = new proto.cosyvoice.instructRequest;
      reader.readMessage(value,proto.cosyvoice.instructRequest.deserializeBinaryFromReader);
      msg.setInstructRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosyvoice.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosyvoice.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosyvoice.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSftRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosyvoice.sftRequest.serializeBinaryToWriter
    );
  }
  f = message.getZeroShotRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cosyvoice.zeroshotRequest.serializeBinaryToWriter
    );
  }
  f = message.getCrossLingualRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cosyvoice.crosslingualRequest.serializeBinaryToWriter
    );
  }
  f = message.getInstructRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cosyvoice.instructRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional sftRequest sft_request = 1;
 * @return {?proto.cosyvoice.sftRequest}
 */
proto.cosyvoice.Request.prototype.getSftRequest = function() {
  return /** @type{?proto.cosyvoice.sftRequest} */ (
    jspb.Message.getWrapperField(this, proto.cosyvoice.sftRequest, 1));
};


/**
 * @param {?proto.cosyvoice.sftRequest|undefined} value
 * @return {!proto.cosyvoice.Request} returns this
*/
proto.cosyvoice.Request.prototype.setSftRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cosyvoice.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosyvoice.Request} returns this
 */
proto.cosyvoice.Request.prototype.clearSftRequest = function() {
  return this.setSftRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosyvoice.Request.prototype.hasSftRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional zeroshotRequest zero_shot_request = 2;
 * @return {?proto.cosyvoice.zeroshotRequest}
 */
proto.cosyvoice.Request.prototype.getZeroShotRequest = function() {
  return /** @type{?proto.cosyvoice.zeroshotRequest} */ (
    jspb.Message.getWrapperField(this, proto.cosyvoice.zeroshotRequest, 2));
};


/**
 * @param {?proto.cosyvoice.zeroshotRequest|undefined} value
 * @return {!proto.cosyvoice.Request} returns this
*/
proto.cosyvoice.Request.prototype.setZeroShotRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cosyvoice.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosyvoice.Request} returns this
 */
proto.cosyvoice.Request.prototype.clearZeroShotRequest = function() {
  return this.setZeroShotRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosyvoice.Request.prototype.hasZeroShotRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional crosslingualRequest cross_lingual_request = 3;
 * @return {?proto.cosyvoice.crosslingualRequest}
 */
proto.cosyvoice.Request.prototype.getCrossLingualRequest = function() {
  return /** @type{?proto.cosyvoice.crosslingualRequest} */ (
    jspb.Message.getWrapperField(this, proto.cosyvoice.crosslingualRequest, 3));
};


/**
 * @param {?proto.cosyvoice.crosslingualRequest|undefined} value
 * @return {!proto.cosyvoice.Request} returns this
*/
proto.cosyvoice.Request.prototype.setCrossLingualRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cosyvoice.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosyvoice.Request} returns this
 */
proto.cosyvoice.Request.prototype.clearCrossLingualRequest = function() {
  return this.setCrossLingualRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosyvoice.Request.prototype.hasCrossLingualRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional instructRequest instruct_request = 4;
 * @return {?proto.cosyvoice.instructRequest}
 */
proto.cosyvoice.Request.prototype.getInstructRequest = function() {
  return /** @type{?proto.cosyvoice.instructRequest} */ (
    jspb.Message.getWrapperField(this, proto.cosyvoice.instructRequest, 4));
};


/**
 * @param {?proto.cosyvoice.instructRequest|undefined} value
 * @return {!proto.cosyvoice.Request} returns this
*/
proto.cosyvoice.Request.prototype.setInstructRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cosyvoice.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosyvoice.Request} returns this
 */
proto.cosyvoice.Request.prototype.clearInstructRequest = function() {
  return this.setInstructRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosyvoice.Request.prototype.hasInstructRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosyvoice.sftRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosyvoice.sftRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosyvoice.sftRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.sftRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    spkId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ttsText: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosyvoice.sftRequest}
 */
proto.cosyvoice.sftRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosyvoice.sftRequest;
  return proto.cosyvoice.sftRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosyvoice.sftRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosyvoice.sftRequest}
 */
proto.cosyvoice.sftRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpkId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtsText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosyvoice.sftRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosyvoice.sftRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosyvoice.sftRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.sftRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpkId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTtsText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string spk_id = 1;
 * @return {string}
 */
proto.cosyvoice.sftRequest.prototype.getSpkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.sftRequest} returns this
 */
proto.cosyvoice.sftRequest.prototype.setSpkId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tts_text = 2;
 * @return {string}
 */
proto.cosyvoice.sftRequest.prototype.getTtsText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.sftRequest} returns this
 */
proto.cosyvoice.sftRequest.prototype.setTtsText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosyvoice.zeroshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosyvoice.zeroshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosyvoice.zeroshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.zeroshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ttsText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    promptText: jspb.Message.getFieldWithDefault(msg, 2, ""),
    promptAudio: msg.getPromptAudio_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosyvoice.zeroshotRequest}
 */
proto.cosyvoice.zeroshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosyvoice.zeroshotRequest;
  return proto.cosyvoice.zeroshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosyvoice.zeroshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosyvoice.zeroshotRequest}
 */
proto.cosyvoice.zeroshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtsText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPromptText(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPromptAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosyvoice.zeroshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosyvoice.zeroshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosyvoice.zeroshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.zeroshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTtsText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPromptText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPromptAudio_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string tts_text = 1;
 * @return {string}
 */
proto.cosyvoice.zeroshotRequest.prototype.getTtsText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.zeroshotRequest} returns this
 */
proto.cosyvoice.zeroshotRequest.prototype.setTtsText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string prompt_text = 2;
 * @return {string}
 */
proto.cosyvoice.zeroshotRequest.prototype.getPromptText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.zeroshotRequest} returns this
 */
proto.cosyvoice.zeroshotRequest.prototype.setPromptText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes prompt_audio = 3;
 * @return {!(string|Uint8Array)}
 */
proto.cosyvoice.zeroshotRequest.prototype.getPromptAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes prompt_audio = 3;
 * This is a type-conversion wrapper around `getPromptAudio()`
 * @return {string}
 */
proto.cosyvoice.zeroshotRequest.prototype.getPromptAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPromptAudio()));
};


/**
 * optional bytes prompt_audio = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPromptAudio()`
 * @return {!Uint8Array}
 */
proto.cosyvoice.zeroshotRequest.prototype.getPromptAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPromptAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosyvoice.zeroshotRequest} returns this
 */
proto.cosyvoice.zeroshotRequest.prototype.setPromptAudio = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosyvoice.crosslingualRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosyvoice.crosslingualRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosyvoice.crosslingualRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.crosslingualRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ttsText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    promptAudio: msg.getPromptAudio_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosyvoice.crosslingualRequest}
 */
proto.cosyvoice.crosslingualRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosyvoice.crosslingualRequest;
  return proto.cosyvoice.crosslingualRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosyvoice.crosslingualRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosyvoice.crosslingualRequest}
 */
proto.cosyvoice.crosslingualRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtsText(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPromptAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosyvoice.crosslingualRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosyvoice.crosslingualRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosyvoice.crosslingualRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.crosslingualRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTtsText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPromptAudio_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string tts_text = 1;
 * @return {string}
 */
proto.cosyvoice.crosslingualRequest.prototype.getTtsText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.crosslingualRequest} returns this
 */
proto.cosyvoice.crosslingualRequest.prototype.setTtsText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes prompt_audio = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cosyvoice.crosslingualRequest.prototype.getPromptAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prompt_audio = 2;
 * This is a type-conversion wrapper around `getPromptAudio()`
 * @return {string}
 */
proto.cosyvoice.crosslingualRequest.prototype.getPromptAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPromptAudio()));
};


/**
 * optional bytes prompt_audio = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPromptAudio()`
 * @return {!Uint8Array}
 */
proto.cosyvoice.crosslingualRequest.prototype.getPromptAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPromptAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosyvoice.crosslingualRequest} returns this
 */
proto.cosyvoice.crosslingualRequest.prototype.setPromptAudio = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosyvoice.instructRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosyvoice.instructRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosyvoice.instructRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.instructRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ttsText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spkId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instructText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosyvoice.instructRequest}
 */
proto.cosyvoice.instructRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosyvoice.instructRequest;
  return proto.cosyvoice.instructRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosyvoice.instructRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosyvoice.instructRequest}
 */
proto.cosyvoice.instructRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtsText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpkId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosyvoice.instructRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosyvoice.instructRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosyvoice.instructRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.instructRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTtsText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpkId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstructText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string tts_text = 1;
 * @return {string}
 */
proto.cosyvoice.instructRequest.prototype.getTtsText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.instructRequest} returns this
 */
proto.cosyvoice.instructRequest.prototype.setTtsText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string spk_id = 2;
 * @return {string}
 */
proto.cosyvoice.instructRequest.prototype.getSpkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.instructRequest} returns this
 */
proto.cosyvoice.instructRequest.prototype.setSpkId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string instruct_text = 3;
 * @return {string}
 */
proto.cosyvoice.instructRequest.prototype.getInstructText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosyvoice.instructRequest} returns this
 */
proto.cosyvoice.instructRequest.prototype.setInstructText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosyvoice.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cosyvoice.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosyvoice.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    ttsAudio: msg.getTtsAudio_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosyvoice.Response}
 */
proto.cosyvoice.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosyvoice.Response;
  return proto.cosyvoice.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosyvoice.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosyvoice.Response}
 */
proto.cosyvoice.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTtsAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosyvoice.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosyvoice.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosyvoice.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosyvoice.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTtsAudio_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes tts_audio = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cosyvoice.Response.prototype.getTtsAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tts_audio = 1;
 * This is a type-conversion wrapper around `getTtsAudio()`
 * @return {string}
 */
proto.cosyvoice.Response.prototype.getTtsAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTtsAudio()));
};


/**
 * optional bytes tts_audio = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTtsAudio()`
 * @return {!Uint8Array}
 */
proto.cosyvoice.Response.prototype.getTtsAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTtsAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosyvoice.Response} returns this
 */
proto.cosyvoice.Response.prototype.setTtsAudio = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.cosyvoice);
